# action.yml
# AGGIORNARE LE VERSIONI DI TUTTE LE DIPENDENZE!!!!
# RIVERIFICARE IL FUNZIONAMENTO E RIDURLE QUANDO POSSIBILE!!!!!!!
# CONTINUE-ON-ERROR Si puo' mettere continue-on-error: true
# HA ACCESSO HA CONTEXT!!!!!! per esempio al nome della azione:
# github.action!!!!!  https://docs.github.com/en/actions/learn-github-actions/contexts#contexts

#name: 'Barsali_Hello_World'
#description: 'Greet someone and record the time'
#inputs:
  #who-to-greet:  # id of input
    #description: 'Who to greet'
    #required: true
    #default: 'World'
#outputs:
  #time: # id of output
    #description: 'The time we greeted you'
#runs:
  #using: 'docker'
  #image: 'Dockerfile'
  #args:
    #- ${{ inputs.who-to-greet }}

#Queste righe vanno dentro il file Dockerfile!!!!!!!!!!!!
# Container image that runs your code
#FROM alpine:3.10

# Copies your code file from your action repository to the filesystem path `/` of the container
#COPY entrypoint.sh /entrypoint.sh

# change permission to execute the script and
# RUN chmod +x /entrypoint.sh

# Code file to execute when the docker container starts up (`entrypoint.sh`)
#ENTRYPOINT ["/entrypoint.sh"]

# Si possono anche eseguire files locali!!!!!!!!! purche' con il permesso di esecuzione!!!!
# Si potrebbe anche scegliere di inserire una serie di operazioni in un file Linux!!! ma comunque potrebbe non essere necessario


name: 'Barsali_Hello_World'
description: 'Greet someone'
inputs:
  who-to-greet:  # id of input
    description: 'Who to greet'
    required: true
    default: 'World'
outputs:
  random-number:
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-id }}
  credenziali:
    description: "Credenziali per il salvataggio Firebase"
    value: ${{ steps.credentials-reader.outputs.credentials-id }}
env:
  mascot: Mona
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  PASSWORDS: 'TESTO'
runs:
  using: "composite"
  steps:

      # SCRIPTS EFFICACI!!!!!
      # - name: Stampa credenziali da file!!
      #   id: lettura
      #   run: |
      #     ls
      #     cat credentials.txt
      #     value=`cat credentials.txt`
      #     echo $value
      #     echo ecco il valore $value
      #     JSON=credentials.txt
      #     cat $JSON
      #   # echo " la password: ${env.PASSWORDS} !!!!!!!!!!!!!!!!!!!!!!!!!"
      #   # echo "FOO=$value" >> $GITHUB_ENV
      #
      #   # echo "VALORE DELLE VARIABILI AMBIENTALI: $PASSWORDS !!!!!!!!!!!!!!"
      #   # echo ${{env.PASSWORDS}}
      #   #echo "GITHUB_CREDENZIALI=$value" >> $GITHUB_ENV
      #   #echo "${GITHUB_CREDENZIALI}"
      #   shell: bash

      # - name: Stampa il files
      #   run: |
      #     cat ./credentials0.txt
      #     value=`cat credentials.json`
      #     echo toJSON($value)
      #   #testo = toJSON(${ANTONIO})
      #   #echo $testo
      #   #cat ${{fromJson(credentials)}}
      #   shell: bash

      - id: set_var
        run: |
          content=`cat ./credentials.json`
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          echo "::set-output name=converted::`fromJson($content)`"
          echo "::set-output name=packageJson::$content"
        shell: bash

      - name: DEBUG CAMPI SINGOLI JSON
        run: |
          echo "${{steps.set_var.outputs.converted.type }} !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
          echo "${{fromJson(steps.set_var.outputs.packageJson).type }} !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        shell: bash

      - id: random-number-generator
        run: echo "::set-output name=random-number::$(echo $RANDOM)"
        shell: bash

      - name: lettore delle credenziali
        id: credentials-reader
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        run: |
          echo "::set-env name=luce::giuseppe"
          echo "nome delle variabili ${{env.luce}}"
          echo 'NOME ACTION ${{github.env.luce}} !!!!!!!!!!!!!!!!!!!!!!!!!!'
          echo 'Hi ${{ env.mascot }}'
        shell: bash

      - name: Set branch name as env variable
        run: |
          echo FILE=credentials.json >> $GITHUB_ENV
        # echo 'VALORE<<EOF' >> $GITHUB_ENV
          # cat ./credentials.txt >> $GITHUB_ENV
          # echo 'EOF' >> $GITHUB_ENV
        # currentbranch="STARGATE"
          # echo "running on $currentbranch"
          # value=`cat credentials.txt`
          # echo "BRANCH=$currentbranch" >> $GITHUB_ENV
          # echo "VALORE=$value" >> $GITHUB_ENV
        #fbcred= `cat credentials.txt`
        #echo "assegning variable $fbcred"
        shell: bash

      - name: riscrittura
        run: |
          echo "---------- To rightly write  "
          cat ${{env.FILE}}
          cat ${{toJSON(env.FILE)}}
        # echo "----------------------- OPENING ${{env.VALORE}} !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
          # echo "OPENING ${{env.VALORE}}"
        shell: bash

      - name: lettura variabili
        id: rilettura
        env:
          BRANCH_REF: $(cat ./credentials.json)
          # BRANCH_REF: "${{ github.ref }}"
        run: echo "The branch is $BRANCH_REF"
        # run: |
        #   echo "ecco il valore ${{steps.lettura.outputs.value}} !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        # echo "ecco ancora il valore ${{GITHUB.FOO}} ed anche ${{env.PASSWORDS}}"
        #echo "ecco lettura RANDOM ${{ outputs.random-number }} e altro ${{ outputs.credenziali }}"
        shell: bash
      - name: PROVIAMO A LEGGERE SE AMBIENTALE
        run: echo "LETTURA ${{steps.rilettura.env.BRANCH_REF}}"
        shell: bash

      #salvataggio del file json convertito in precedenza
      - name: Update latest version in realtime database
        uses: w9jds/firebase-trigger@master
        env:
          VALORE: ${{toJson(steps.set_var.outputs.packageJson)}}
          #GITHUB_CONTEXT: ${{ toJSON(github.repository) }}
          #NOME_REPOSITORY:
        with:
          credentials: "$VALORE"
          databaseUrl: https://databasericette-beeb7.firebaseio.com
          path: "${{ github.repository }}"
          #Si devono mettere come segreto!!!
          value: "PEPPE!!"

    # - name: legge il file con le password
    #   run: |
    #     ls
    #     echo 'eccomi'
    #     JSON=$(cat ./credentials.txt)
    #     echo $JSON
    #     echo GITHUB_CREDENTIALS=$(cat ./credentials.txt) >> $GITHUB_ENV
    #   #JSON=$(cat ./credential.txt)
    #   #echo (cat credentials.txt )
    #   shell: bash
    #
      # - name: Create .env file
      #   uses: ozaytsev86/create-env-file@v1
      #   with:
      #     ENV_TEST_API_KEY: ${{ secrets.FIREBASE_CREDENTIALS }}


      # - name: Operazioni Firebase DB
      #   uses: w9jds/firebase-action@master
      #   with:
      #     args: database:set --force --debug  --project databasericette-beeb7 /giuseppegargani/ecchime PEPPE
      #   env:
      #     GCP_SA_KEY: "${{ env.FILE }}"
